#
# Config file for Behringer BCR2000 controller
#
# ---------------------------------------------------
# First, include the common config files
#
@include "devices.cfg"
@include "matrix.cfg"

#
# MIDI controller definitions
#
controllers:
{
  #
  # An index control's value is used to change the mapping of another control based on its value.
  # E.g. an index control is used to select an envelope, then a single common set of envelope parameter controls
  #      are mapped to the particular envelope indicated by the index control.
  index_controls:
  {
    # Index control for envelope selection - value is 0, 1 or 2.
  	envelope_index:
	{
	  	type = "continuous";	# Type: continuous, has a range of values.
	    midi_cc = [ 88 ];		# Midi continuous controller id (single, for 7-bit value).
	    min = 0;				# Minimum value
    	max = 2;				# Maximum value
	}
  }
  
  # Control to trigger exiting of the Pithesiser.
  exit:
  {
    type = "event";				# Type: event, fires a single event to trigger something.
    midi_cc = [ 46 ];
    threshold = 63;				# Value of controller above which the event is triggered.
  }
  
  # Take a screenshot; saved to a file named like: pithesiser-img-XXX.png
  screenshot:
  {
    type = "event";
    midi_cc = [ 45 ];
    threshold = 63;
  }
  
  # Trigger profiling to start; will end when application is exited, and profiling data is written to the file
  # specified in the profiling section (output_file setting).
  profile:
  {
    type = "event";
    midi_cc = [ 44 ];
    threshold = 63;
  }
  
  # Control for overall volume.
  master_volume:
  {
    type = "continuous";
    midi_cc = [ 1, 33 ];		# Midi continuous controller ids - two specified that are set up for 14-bit values.
    min = 0;
    max = 4095;
  }
  
  # Control for selecting the oscillator waveform
  waveform_select:
  {
    type = "continuous";
    midi_cc = [ 2 ];
    min = 0;
    max = 7;
  }
  
  # Control for "tuning" the oscilloscope display to a particular MIDI note value
  oscilloscope_frequency:
  {
    type = "continuous";
    midi_cc = [ 3 ];
    min = 0;
    max = 127;
  }

  #-------------------------------------------------------------------------
  # Set of controls for modifying each envelopes' settings.
  #
  # Each has an indexer setting, specifying the index control and the value
  # of the index control for this envelope.
  #
  # Settings for the other envelopes' controllers also follow, each essentially
  # the same for each envelope (type, midi CC, etc) apart from the indexer control value.
  #
  envelope_1_attack_time:
  {
    type = "continuous_relative";			# Type: continuous relative, just increments and decrements rather than retaining a value.
    midi_cc = [ 81 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 0;
    }
  }
  
  envelope_1_attack_level:
  {
    type = "continuous_relative";
    midi_cc = [ 82 ];
    delta_scale = 16;						# Scale factor applied to make control more responsive
    indexer:
    {
    	controller = "envelope_index";
    	value = 0;
    }
  }
  
  envelope_1_decay_time:
  {
    type = "continuous_relative";
    midi_cc = [ 83 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 0;
    }
  }
  
  envelope_1_decay_level:
  {
    type = "continuous_relative";
    midi_cc = [ 84 ];
    delta_scale = 16;
    indexer:
    {
    	controller = "envelope_index";
    	value = 0;
    }
  }
  
  envelope_1_sustain_time:
  {
  	# A special variation of controller type that uses its maximum value to indicate that sustain should be held
  	# indefinitely while the note is on. 
    type = "continuous_relative_with_held";	
    midi_cc = [ 85 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 0;
    }
  }
  
  envelope_1_release_time:
  {
    type = "continuous_relative";
    midi_cc = [ 86 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 0;
    }
  }
  
  envelope_2_attack_time:
  {
    type = "continuous_relative";
    midi_cc = [ 81 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 1;
    }
  }
  
  envelope_2_attack_level:
  {
    type = "continuous_relative";
    midi_cc = [ 82 ];
    delta_scale = 16;
    indexer:
    {
    	controller = "envelope_index";
    	value = 1;
    }
  }
  
  envelope_2_decay_time:
  {
    type = "continuous_relative";
    midi_cc = [ 83 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 1;
    }
  }
  
  envelope_2_decay_level:
  {
    type = "continuous_relative";
    midi_cc = [ 84 ];
    delta_scale = 16;
    indexer:
    {
    	controller = "envelope_index";
    	value = 1;
    }
  }
  
  envelope_2_sustain_time:
  {
    type = "continuous_relative_with_held";
    midi_cc = [ 85 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 1;
    }
  }
  
  envelope_2_release_time:
  {
    type = "continuous_relative";
    midi_cc = [ 86 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 1;
    }
  }

  envelope_3_attack_time:
  {
    type = "continuous_relative";
    midi_cc = [ 81 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 2;
    }
  }
  
  envelope_3_attack_level:
  {
    type = "continuous_relative";
    midi_cc = [ 82 ];
    delta_scale = 16;
    indexer:
    {
    	controller = "envelope_index";
    	value = 2;
    }
  }
  
  envelope_3_decay_time:
  {
    type = "continuous_relative";
    midi_cc = [ 83 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 2;
    }
  }
  
  envelope_3_decay_level:
  {
    type = "continuous_relative";
    midi_cc = [ 84 ];
    delta_scale = 16;
    indexer:
    {
    	controller = "envelope_index";
    	value = 2;
    }
  }
  
  envelope_3_sustain_time:
  {
    type = "continuous_relative_with_held";
    midi_cc = [ 85 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 2;
    }
  }
  
  envelope_3_release_time:
  {
    type = "continuous_relative";
    midi_cc = [ 86 ];
    indexer:
    {
    	controller = "envelope_index";
    	value = 2;
    }
  }
  
  # Select the waveform for the low frequency oscillator
  lfo_waveform_select:
  {
    type = "continuous";
    midi_cc = [ 90 ];
    min = 0;
    max = 8;
  }
  
  # Set the frequency for the low frequency oscillator
  lfo_frequency:
  {
    type = "continuous";
    midi_cc = [ 91 ];
    min = 0;
    max = 127;
  }
  
  # Set the intensity level for the low frequency oscillator; a scaling factor applied to its modulation effect.
  lfo_level:
  {
    type = "continuous";
    midi_cc = [ 92 ];
    min = 0;
    max = 127;
  }

  # Set the state of the master filter: off, low-pass or high-pass.  
  filter_state:
  {
    type = "continuous";
    midi_cc = [ 97 ];
    min = 0;
    max = 2;
  }
  
  # Set the cutoff frequency of the master filter.
  filter_frequency:
  {
    type = "continuous";
    midi_cc = [ 0, 32 ];
    min = 0;
    max = 4095;
  }
  
  # Set the Q parameter of the master filter.
  filter_q:
  {
    type = "continuous";
    midi_cc = [ 9, 41 ];
    min = 0;
    max = 1023;
  }
}

# System exclusive MIDI configuration for the BCR-2000
sysex:
{
	# A string sent on initialisation; this makes the BCR-2000 send its current controller values
	# back to the application, effectively restoring the synth state.
	init_message = [0x00, 0x20, 0x32, 0x7f, 0x7f, 0x43];
}
